{"version":3,"sources":["Tmdb.js","components/MovieRow/index.js","components/Featured/index.js","components/Header/index.js","components/Footer/index.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","itens","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","NavigateBefore","style","fontSize","listW","results","length","NavigateNext","marginLeft","width","map","item","key","src","poster_path","alt","original_title","FeaturedMovie","data","featuredMovieYear","Date","first_air_date","getFullYear","featuredMovieGenres","i","genres","push","name","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","number_of_seasons","overview","href","id","join","Header","transition","Footer","target","App","mList","setMList","featuredShow","setFeaturedShow","headerTransition","setHeaderTransition","useEffect","Tmdb","list","originals","filter","randomChosenMovie","floor","random","chosen","chosenInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7fb3e0b.chunk.js","sourcesContent":["const API_KEY = '8200c165117925dedabecbeabd4ff1d9'\nconst API_BASE = 'https://api.themoviedb.org/3'\n\n/*\n-originais netflix       - with_networks=213\n-recomendados (trending) - \n-em alta (top rated)\n-ação                    -with_genres=28\n-comedia                 -with_genres=35\n-terror                  -with_genres=27\n-romance                 -with_genres=10749\n-documentários           -with_genres=99\n*/\n/*await pausa a função async ate receber a resposta de sua requisição */\nconst basicFetch = async (endpoint)=>{\n   const req = await fetch(`${API_BASE}${endpoint}`)\n   const json = await req.json()\n   return json\n}\n\nexport default {\n    getHomeList: async ()=>{\n        return [\n            {\n                slug: 'originals',\n                title: 'Original Netflix',\n                itens: await basicFetch(`/discover/tv?with_networks=213&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Recomendados',\n                itens: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'topRated',\n                title: 'Em alta',\n                itens: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Ação',\n                itens: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comedia',\n                itens: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror',\n                itens: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                itens: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentário',\n                itens: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\n            }\n        ]\n    },\n    getMovieInfo: async (movieId, type)=>{\n        let info = {}\n\n        if(movieId){\n            switch(type){\n                case 'movie' :\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`)\n                break;\n                case 'tv' :\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`)\n                break;\n                default:\n                    info = null\n                break; \n            }\n            return info\n        }\n\n    }\n}","import React from \"react\";\nimport './index.css'\nimport { NavigateBefore, NavigateNext} from \"@material-ui/icons\";\nimport { useState } from \"react\";\n\nexport default function ({title, itens}){\n    const [scrollX, setScrollX] = useState(0)\n    \n    const handleLeftArrow =()=>{\n        let x = scrollX + Math.round(window.innerWidth / 2) /* vai somar o scroll atual com a tela do usuario pela metade para fazer a transicao a esquerta*/\n        if(x>0){/*se o scroll tiver maior que zero o scroll vai ser automaticamente 0 */\n            x=0\n        }\n        setScrollX(x)\n    }\n    const handleRightArrow =()=>{\n        let x = scrollX - Math.round(window.innerWidth / 2)\n        let listW = itens.results.length * 150\n        if((window.innerWidth - listW) > x){\n            x = (window.innerWidth - listW) - 60\n        }\n        setScrollX(x)\n    }\n\n    return(\n        <div className='movieRow'> \n             <h2>{title}</h2>\n             <div className=\"movieRow-left\" onClick={handleLeftArrow}><NavigateBefore style={{fontSize: 50}}/></div>\n             <div className=\"movieRow-right\" onClick={handleRightArrow}><NavigateNext style={{fontSize: 50}}/></div>\n\n             <div className='movieRow-listA'>\n                 <div className='movieRow-list' style={{\n                     marginLeft:scrollX,\n                     width: itens.results.length * 150\n                     \n                     }}>\n                    {itens.results.length > 0 && itens.results.map((item, key)=>(\n                        <div key={key} className='movieRow-item'>\n                             <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title}/>\n                        </div>\n                    ))}   \n                 </div>\n             </div>\n        </div>\n    )\n\n}","import React from \"react\";\nimport './index.css'\n\nexport default function FeaturedMovie({data}){\n\n    let featuredMovieYear = new Date(data.first_air_date).getFullYear()\n    let featuredMovieGenres = [];\n    for (let i in data.genres){\n        featuredMovieGenres.push(data.genres[i].name);\n    }\n\n\n    return(\n        <section className='featured' style={{\n            backgroundSize:'cover', \n            backgroundPosition: 'center', \n            backgroundImage: `url(https://image.tmdb.org/t/p/original/${data.backdrop_path})`\n            }}>\n            <div className='featured-vertical'>\n                <div className='featured-horizontal'>\n                    <div className='featured-name'>{data.original_name}</div>\n                    <div className='featured-infos'>\n                        <div className='featured-points'>{data.vote_average} pontos</div>\n                        <div className='featured-year'>{featuredMovieYear}</div>\n                        <div className='featured-seasons'>{data.number_of_seasons} temporada{data.number_of_seasons > 1 ? 's' : ''}</div>\n                    </div>\n                    <div className='featured-description'>{data.overview}</div>\n                    <div className='featured-btns'>\n                        <a href={`/watch/${data.id}`} className='featured-Wbtn'>▶ Assistir</a>\n                        <a href={`/list/add/${data.id}`} className='featured-Lbtn'>+ Minha lista</a>\n                    </div>\n                    <div className='featured-genres'><strong>Gêneros:</strong> {featuredMovieGenres.join(', ')}</div>\n                </div>\n            </div>\n        </section>\n    )\n}","import React from \"react\";\nimport './index.css'\n\n\nexport default function Header({transition}){\n    return(\n        <header className={transition ? 'transition' : ''}>\n            <div className='header-logo'>\n                <a href='/'>\n                    <img src='https://upload.wikimedia.org/wikipedia/commons/6/67/NewNetflixLogo.png' alt='Netflix'/>\n                </a>\n            </div>\n            <div className='header-user'>\n                <a href='/user'>\n                    <img src='https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png' alt='user'/>\n                </a>\n            </div>\n        </header>\n    )\n}","import './index.css'\n\n\nexport default function Footer(){\n    return(\n        <footer>\n            Feito por <span>Vitor Wilson</span><br/>\n            Conteudo ministrado por <span><a href=\"https://www.youtube.com/watch?v=tBweoUiMsDg\" target=\"_blank\">Bonieky Lacerda/B7Web</a></span><br/>\n            Direitos de imagem para <span><a href=\"https://www.netflix.com/\" target=\"_blank\">Netflix</a></span><br/>\n            Direito da Base de Dados para <span><a href=\"https://www.themoviedb.org/\" target=\"_blank\">themoviedb.org</a></span>\n        </footer>\n    )\n}","import React, {useEffect, useState} from \"react\"\nimport Tmdb from \"./Tmdb\";\nimport MovieRow from \"./components/MovieRow\";\nimport FeaturedMovie from \"./components/Featured\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport './App.css'\n\nexport default function App() {\n  const [mList, setMList] = useState([])\n  const [featuredShow, setFeaturedShow] = useState(null)\n  const [headerTransition, setHeaderTransition] = useState(false)\n\n  useEffect(()=>{\n    const loadAll = async ()=>{\n      \n      /*pegando lista de filmes */\n      let list = await Tmdb.getHomeList()\n      setMList(list)\n\n      //pegando featured\n      let originals = list.filter(i=>i.slug === 'originals') /*vai pegar somente os filmes da lista que tiver slug como originals */\n      let randomChosenMovie = Math.floor(Math.random() * (originals[0].itens.results.length - 1)) /*vai gerar um numero aleatorio que vai estar presentes entre os filmes */\n      let chosen = originals[0].itens.results[randomChosenMovie] /*atribui a escolha o filme com gerado pela variavel anterior*/\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv')\n      setFeaturedShow(chosenInfo)\n    }\n    loadAll()\n  },[])\n\n  useEffect(()=> {\n    const scrollListener =()=>{\n      if (window.scrollY > 10){\n        setHeaderTransition(true)\n      }else{\n        setHeaderTransition(false)\n      }\n    }\n\n    window.addEventListener('scroll', scrollListener)\n\n    return ()=>{\n      window.removeEventListener('scroll', scrollListener)\n    }\n  },[])\n\n  return (\n    <div className='page'>\n    \n      <Header transition={headerTransition}/>\n      \n      {featuredShow && <FeaturedMovie data={featuredShow}/> /*se houver algo em featuredshow ele vai mostrar FeaturedMovie */}\n      <section className='list'>\n        {mList.map((item, key)=>{\n          return (\n              <MovieRow key={key} title={item.title} itens={item.itens}/>\n            )\n        })}\n      </section>\n      <Footer/>\n      {\n      mList.length <= 0 &&\n      <div className='loading'>\n        <img src='https://media.filmelier.com/noticias/br/2020/03/Netflix_LoadTime.gif' alt='carregando'/>\n      </div>\n      }\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}